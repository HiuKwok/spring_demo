
server.port=8080

#spring.datasource.url=jdbc:h2:file:./demo
# In memory DB
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# Whether to load the default dataset or not.
# By default, it read from src/main/resources/data.sql
spring.jpa.defer-datasource-initialization=true

###### H2 specific setting #######
# To expose the Web UI. (http://localhost:8080/h2-console)
spring.h2.console.enabled=true
#spring.h2.console.settings.trace=false
#spring.h2.console.settings.web-allow-others=false



######## Spring Security - JWK #############
keycloak.server.contextPath=/auth
keycloak.server.adminUser.username=sa
keycloak.server.adminUser.password=password
keycloak.server.realmImportFile=hf-realm.json



#spring.security.oauth2.resourceserver.jwt.public-key-location= classpath:my-public-key.pub


#The below two lines will trigger Spring to create:
#a JwkTokenStore with the only ability to decode a JWT and verifying its signature
#a DefaultTokenServices instance to use the former TokenStore
#security.oauth2.resource.jwk.key-set-uri=http://localhost:8081/sso-auth-server/.well-known/jwks.json
#spring.security.oauth2.resourceserver.jwk-set-uri=http://localhost:8081/sso-auth-server/.well-known/jwks.json

# Client registration
#security.oauth2.client.client-id=bael-client
#security.oauth2.client.client-secret=bael-secret

